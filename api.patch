diff --git a/.gitignore b/.gitignore
index 4d29575..f287e64 100644
--- a/.gitignore
+++ b/.gitignore
@@ -14,6 +14,7 @@
 # misc
 .DS_Store
 .env.local
+.env.development
 .env.development.local
 .env.test.local
 .env.production.local
diff --git a/package-lock.json b/package-lock.json
index 8d1f5d0..48962cb 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -15,6 +15,8 @@
         "react-dom": "^18.2.0",
         "react-router-dom": "^6.22.3",
         "react-scripts": "5.0.1",
+        "react-slick": "^0.30.2",
+        "slick-carousel": "^1.8.1",
         "web-vitals": "^2.1.4"
       }
     },
@@ -3452,9 +3454,9 @@
       "integrity": "sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw=="
     },
     "node_modules/@rushstack/eslint-patch": {
-      "version": "1.10.1",
-      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.10.1.tgz",
-      "integrity": "sha512-S3Kq8e7LqxkA9s7HKLqXGTGck1uwis5vAXan3FnU5yw1Ec5hsSGnq4s/UCaSqABPOnOTg7zASLyst7+ohgWexg=="
+      "version": "1.10.2",
+      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.10.2.tgz",
+      "integrity": "sha512-hw437iINopmQuxWPSUEvqE56NCPsiU8N4AYtfHmJFckclktzK9YQJieD3XkDCDH4OjL+C7zgPUh73R/nrcHrqw=="
     },
     "node_modules/@sinclair/typebox": {
       "version": "0.24.51",
@@ -6129,6 +6131,11 @@
       "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.2.3.tgz",
       "integrity": "sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ=="
     },
+    "node_modules/classnames": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/classnames/-/classnames-2.5.1.tgz",
+      "integrity": "sha512-saHYOzhIQs6wy2sVxTM6bUDsQO4F50V9RQ22qBpEdCW+I+/Wmke2HOl6lS6dTpdxVhb88/I6+Hs+438c3lfUow=="
+    },
     "node_modules/clean-css": {
       "version": "5.3.3",
       "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-5.3.3.tgz",
@@ -7320,6 +7327,11 @@
         "node": ">=10.13.0"
       }
     },
+    "node_modules/enquire.js": {
+      "version": "2.1.6",
+      "resolved": "https://registry.npmjs.org/enquire.js/-/enquire.js-2.1.6.tgz",
+      "integrity": "sha512-/KujNpO+PT63F7Hlpu4h3pE3TokKRHN26JYmQpPyjkRD/N57R7bPDNojMXdi7uveAKjYB7yQnartCxZnFWr0Xw=="
+    },
     "node_modules/entities": {
       "version": "2.2.0",
       "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
@@ -12172,6 +12184,12 @@
         "jiti": "bin/jiti.js"
       }
     },
+    "node_modules/jquery": {
+      "version": "3.7.1",
+      "resolved": "https://registry.npmjs.org/jquery/-/jquery-3.7.1.tgz",
+      "integrity": "sha512-m4avr8yL8kmFN8psrbFFFmB/If14iN5o9nw/NgnnM+kybDJpRsAynV2BsfpTYrTRysYUdADVD7CkUUizgkpLfg==",
+      "peer": true
+    },
     "node_modules/js-tokens": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
@@ -12270,6 +12288,14 @@
       "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
       "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw=="
     },
+    "node_modules/json2mq": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/json2mq/-/json2mq-0.2.0.tgz",
+      "integrity": "sha512-SzoRg7ux5DWTII9J2qkrZrqV1gt+rTaoufMxEzXbS26Uid0NwaJd123HcoB80TgubEppxxIGdNxCx50fEoEWQA==",
+      "dependencies": {
+        "string-convert": "^0.2.0"
+      }
+    },
     "node_modules/json5": {
       "version": "2.2.3",
       "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
@@ -15220,6 +15246,22 @@
         }
       }
     },
+    "node_modules/react-slick": {
+      "version": "0.30.2",
+      "resolved": "https://registry.npmjs.org/react-slick/-/react-slick-0.30.2.tgz",
+      "integrity": "sha512-XvQJi7mRHuiU3b9irsqS9SGIgftIfdV5/tNcURTb5LdIokRA5kIIx3l4rlq2XYHfxcSntXapoRg/GxaVOM1yfg==",
+      "dependencies": {
+        "classnames": "^2.2.5",
+        "enquire.js": "^2.1.6",
+        "json2mq": "^0.2.0",
+        "lodash.debounce": "^4.0.8",
+        "resize-observer-polyfill": "^1.5.0"
+      },
+      "peerDependencies": {
+        "react": "^0.14.0 || ^15.0.1 || ^16.0.0 || ^17.0.0 || ^18.0.0",
+        "react-dom": "^0.14.0 || ^15.0.1 || ^16.0.0 || ^17.0.0 || ^18.0.0"
+      }
+    },
     "node_modules/read-cache": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
@@ -15422,6 +15464,11 @@
       "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
       "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ=="
     },
+    "node_modules/resize-observer-polyfill": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/resize-observer-polyfill/-/resize-observer-polyfill-1.5.1.tgz",
+      "integrity": "sha512-LwZrotdHOo12nQuZlHEmtuXdqGoOD0OhaxopaNFxWzInpEgaLWoVuAMbTzixuosCx2nEG58ngzW3vxdWoxIgdg=="
+    },
     "node_modules/resolve": {
       "version": "1.22.8",
       "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz",
@@ -16065,6 +16112,14 @@
         "node": ">=8"
       }
     },
+    "node_modules/slick-carousel": {
+      "version": "1.8.1",
+      "resolved": "https://registry.npmjs.org/slick-carousel/-/slick-carousel-1.8.1.tgz",
+      "integrity": "sha512-XB9Ftrf2EEKfzoQXt3Nitrt/IPbT+f1fgqBdoxO3W/+JYvtEOW6EgxnWfr9GH6nmULv7Y2tPmEX3koxThVmebA==",
+      "peerDependencies": {
+        "jquery": ">=1.8.0"
+      }
+    },
     "node_modules/sockjs": {
       "version": "0.3.24",
       "resolved": "https://registry.npmjs.org/sockjs/-/sockjs-0.3.24.tgz",
@@ -16322,6 +16377,11 @@
         "safe-buffer": "~5.2.0"
       }
     },
+    "node_modules/string-convert": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/string-convert/-/string-convert-0.2.1.tgz",
+      "integrity": "sha512-u/1tdPl4yQnPBjnVrmdLo9gtuLvELKsAoRapekWggdiQNvvvum+jYF329d84NAa660KQw7pB2n36KrIKVoXa3A=="
+    },
     "node_modules/string-length": {
       "version": "4.0.2",
       "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
diff --git a/package.json b/package.json
index 0944558..4bb7415 100644
--- a/package.json
+++ b/package.json
@@ -10,10 +10,12 @@
     "react-dom": "^18.2.0",
     "react-router-dom": "^6.22.3",
     "react-scripts": "5.0.1",
+    "react-slick": "^0.30.2",
+    "slick-carousel": "^1.8.1",
     "web-vitals": "^2.1.4"
   },
   "scripts": {
-    "start": "react-scripts start",
+    "start": "PORT=7070 react-scripts start",
     "build": "react-scripts build",
     "test": "react-scripts test",
     "eject": "react-scripts eject"
diff --git a/src/components/MoviePage.js b/src/components/MoviePage.js
index 9e5f1ac..ec1ed53 100644
--- a/src/components/MoviePage.js
+++ b/src/components/MoviePage.js
@@ -1,45 +1,107 @@
-import React from "react";
-import { useParams, Link } from "react-router-dom";
+import React, {useState, useEffect} from "react";
+import {useParams, Link} from "react-router-dom";
+import {fetchMovieDetails} from "../services/MovieService";
+import Slider from "react-slick";
+import "slick-carousel/slick/slick.css";
+import "slick-carousel/slick/slick-theme.css";
+import Pagination from "./Pagination/Pagination";
 
 const MoviePage = () => {
-  const { id } = useParams();
-  const movie = {
-    id: parseInt(id),
-    title: "Some Movie",
-    description: "Description here",
-    actors: ["Actor One", "Actor Two"],
-    seasons: [{ title: "Season 1", episodes: ["Episode 1", "Episode 2"] }],
-    reviews: ["Review 1", "Review 2"],
-    posters: ["/images/poster1.jpg", "/images/poster2.jpg"],
-    similarMovies: [{ id: 2, title: "Similar Movie" }],
-  };
-
-  return (
-    <div className="movie-detail">
-      <nav>
-        <Link to="/">Back to list</Link>
-      </nav>
-      <header>
-        <h1>{movie.title}</h1>
-      </header>
-      <section>
-        <p>{movie.description}</p>
-      </section>
-      <section>
-        <h2>Actors</h2>
-        <p>{movie.actors.join(", ")}</p>
-      </section>
-      <section>
-        <h2>Posters</h2>
-        {movie.posters.map((poster, index) => (
-          <figure key={index}>
-            <img src={poster} alt={`Poster of ${movie.title}`} />
-            <figcaption>{`Poster ${index + 1}`}</figcaption>
-          </figure>
-        ))}
-      </section>
-    </div>
-  );
+    const {id} = useParams();
+    const [movie, setMovie] = useState(null);
+    const [isLoading, setIsLoading] = useState(true);
+    const [sliderSettings] = useState({
+        dots: true, // Show dot indicators
+        infinite: true, // Infinite looping
+        speed: 500, // Animation speed
+        slidesToShow: 3, // Number of slides to show at once
+        slidesToScroll: 1, // Number of slides to scroll at once
+        autoplay: true, // Auto-play the slides
+        autoplaySpeed: 2000, // Speed of auto-play
+        // Add more settings as needed
+    });
+
+    const [currentPage, setCurrentPage] = useState(1);
+    const actorsPerPage = 10; // Or any other number you prefer
+
+    // Calculate the current actors to display
+    const indexOfLastActor = currentPage * actorsPerPage;
+    const indexOfFirstActor = indexOfLastActor - actorsPerPage;
+    const currentActors = movie?.persons?.slice(indexOfFirstActor, indexOfLastActor);
+
+
+    useEffect(() => {
+        const loadMovieDetails = async () => {
+            try {
+                setIsLoading(true);
+                const data = await fetchMovieDetails(id);
+                setMovie(data);
+            } catch (error) {
+                console.error("Failed to load movie details:", error);
+                // Optionally handle the error state here
+            } finally {
+                setIsLoading(false);
+            }
+        };
+
+        loadMovieDetails();
+    }, [id]); // Re-fetch if the ID changes
+
+    if (isLoading) return <div>Loading...</div>;
+    if (!movie) return <div>Movie not found</div>;
+
+    return (
+        <div className="movie-detail">
+            <nav>
+                <Link to="/">Back to list</Link>
+            </nav>
+            <header>
+                <h1>{movie.name ? movie.name : 'Movie Name was not provided'}</h1>
+            </header>
+            <section>
+                <img style={{height: 100, width: "auto"}} src={movie.poster.url} alt={`Poster of ${movie.name}`}/>
+                <p>{movie.description ? movie.description : 'No movie Description provided'}</p>
+            </section>
+            <section>
+                <h2>Actors</h2>
+                {movie.persons && movie.persons.length > 0 ? (
+                    <>
+                        {currentActors.map((person) => (
+                            <div key={person.id}>
+                                <img style={{height: 100, width: "auto"}} src={person.photo}
+                                     alt={`Poster of ${person.name}`}/>
+                                <p>{person.name}</p>
+                            </div>
+                        ))}
+                        <Pagination
+                            currentPage={currentPage}
+                            totalPages={Math.ceil(movie.persons.length / actorsPerPage)}
+                            onPageChange={(page) => setCurrentPage(page)}
+                        />
+                    </>
+                ) : (
+                    <p>No information about actors.</p>
+                )}
+            </section>
+            <section>
+                <h2>Similar Movies</h2>
+                {movie.similarMovies && movie.similarMovies.length > 0 ? (
+                    <Slider {...sliderSettings}>
+                        {movie.similarMovies.map((similarMovie) => (
+                            <Link key={similarMovie.id} to={`/movie/${similarMovie.id}`}>
+                                <div>
+                                    <img src={similarMovie.poster.url} alt={`Poster of ${similarMovie.name}`} style={{ width: "100%", height: "auto" }} />
+                                    <p>{similarMovie.name}</p>
+                                </div>
+                            </Link>
+                        ))}
+                    </Slider>
+                ) : (
+                    <p>No similar movies found.</p>
+                )}
+            </section>
+        </div>
+    );
 };
 
 export default MoviePage;
diff --git a/src/components/MoviesList.js b/src/components/MoviesList.js
index ee0c9bb..10ea51c 100644
--- a/src/components/MoviesList.js
+++ b/src/components/MoviesList.js
@@ -1,113 +1,99 @@
-import React, { useState } from "react";
-import { Link } from "react-router-dom";
+import React, {useEffect, useState} from "react";
+import {Link} from "react-router-dom";
+import {fetchMoviesWithFilters, searchMoviesByTitle} from "../services/MovieService";
+import Pagination from "./Pagination/Pagination";
 
 const MoviesList = () => {
-  // Movies Array
-  const movies = [
-    {
-      id: 1,
-      title: "The Shawshank Redemption",
-      year: 1994,
-      country: "USA",
-      rating: "R",
-    },
-    {
-      id: 2,
-      title: "The Godfather",
-      year: 1972,
-      country: "USA",
-      rating: "R",
-    },
-    {
-      id: 3,
-      title: "Inception",
-      year: 2010,
-      country: "USA",
-      rating: "PG-13",
-    },
-    {
-      id: 4,
-      title: "Pulp Fiction",
-      year: 1994,
-      country: "USA",
-      rating: "R",
-    },
-    {
-      id: 5,
-      title: "Schindler's List",
-      year: 1993,
-      country: "USA",
-      rating: "R",
-    },
-    {
-      id: 6,
-      title: "The Matrix",
-      year: 1999,
-      country: "USA",
-      rating: "R",
-    },
-    {
-      id: 7,
-      title: "The Lord of the Rings: The Fellowship of the Ring",
-      year: 2001,
-      country: "New Zealand",
-      rating: "PG-13",
-    },
-    {
-      id: 8,
-      title: "Star Wars: Episode V - The Empire Strikes Back",
-      year: 1980,
-      country: "USA",
-      rating: "PG",
-    },
-    {
-      id: 9,
-      title: "Forrest Gump",
-      year: 1994,
-      country: "USA",
-      rating: "PG-13",
-    },
-    {
-      id: 10,
-      title: "Fight Club",
-      year: 1999,
-      country: "USA",
-      rating: "R",
-    },
-  ];
+    const [movies, setMovies] = useState([]);
+    const [loading, setLoading] = useState(false);
+    const [error, setError] = useState(null);
+    const [query, setQuery] = useState('');
+    const [currentPage, setCurrentPage] = useState(1);
+    const [pageLimit, setPageLimit] = useState(10);
+    const [totalPages, setTotalPages] = useState(0);
+    const [searchMode, setSearchMode] = useState(false)
 
-  // States for Filter and Search
-  const [searchTerm, setSearchTerm] = useState("");
-  const [activePage, setActivePage] = useState(1);
+    useEffect(() => {
+        const fetchMovies = async () => {
+            setLoading(true);
+            try {
+                const data = await fetchMoviesWithFilters({
+                    limit: pageLimit,
+                    page: currentPage, // Use current page state
+                    selectFields: ['id', 'name', 'year', 'alternativeName'], // requested fields
+                    year: [2001, 2002], // TODO Можно отфильтровать выдачу (по году, стране и возрастному рейтингу)
+                    country: ['Россия', 'США'], // TODO Можно отфильтровать выдачу (по году, стране и возрастному рейтингу)
+                    sortField: ['rating.kp'],
+                    ageRating: [18, 12], // TODO Можно отфильтровать выдачу (по году, стране и возрастному рейтингу)
+                    sortType: ['-1'], // Descending by rating.kp
+                });
+                setMovies(data.docs || []);
+                setTotalPages(Math.ceil(data.totalDocs / data.limit)); // Calculate total pages
+            } catch (err) {
+                console.error(err);
+                setError('Failed to fetch movies.');
+            } finally {
+                setLoading(false);
+            }
+        };
 
-  const filteredMovies = movies.filter((movie) =>
-    movie.title.toLowerCase().includes(searchTerm.toLowerCase())
-  );
+        if (!searchMode) {
+            fetchMovies();
+        } else handleSearch(null, currentPage, pageLimit)
+    }, [currentPage]); // Rerun when currentPage changes
 
-  return (
-    <div className="movies-list">
-      <header>
-        <h1>Movies List</h1>
-      </header>
-      <input
-        type="text"
-        placeholder="Search by title..."
-        aria-label="Search movies by title"
-        onChange={(e) => setSearchTerm(e.target.value)}
-      />
-      <nav>
-        {filteredMovies.map((movie) => (
-          <article key={movie.id}>
-            <Link to={`/movie/${movie.id}`}>
-              <h2>
-                {movie.title} ({movie.year})
-              </h2>
-            </Link>
-          </article>
-        ))}
-      </nav>
-    </div>
-  );
+    const handleSearch = async (e, page = 1, limit = 10) => {
+        e.preventDefault();
+        setLoading(true);
+        setError('');
+        setSearchMode(true);
+
+        try {
+            const data = await searchMoviesByTitle(query, page, limit);
+            setMovies(data.docs || []);
+        } catch (err) {
+            console.error(err);
+            setError('Failed to search for movies.');
+        } finally {
+            setLoading(false);
+        }
+    };
+
+    return (
+        <div className="movies-list">
+            <header>
+                <h1>Movies List</h1>
+            </header>
+            <form onSubmit={handleSearch}>
+                <input
+                    type="text"
+                    value={query}
+                    onChange={(e) => setQuery(e.target.value)}
+                    placeholder="Search for a movie..."
+                />
+                <button type="submit">Search</button>
+            </form>
+
+            {loading && <div>Loading...</div>}
+            {error && <div>Error: {error}</div>}
+            {!error && !loading && <nav>
+                {movies.length ? movies.map((movie) => (
+                    <article key={movie.id}>
+                        <Link to={`/movie/${movie.id}`}>
+                            <h2>
+                                {movie.name || movie.alternativeName} ({movie.year})
+                            </h2>
+                        </Link>
+                    </article>
+                )) : 'No movies were found'}
+            </nav>}
+            <Pagination
+                currentPage={currentPage}
+                totalPages={totalPages}
+                onPageChange={(page) => setCurrentPage(page)}
+            />
+        </div>
+    );
 };
 
 export default MoviesList;
